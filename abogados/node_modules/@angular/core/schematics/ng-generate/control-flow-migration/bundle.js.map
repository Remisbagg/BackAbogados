{
  "version": 3,
  "sources": ["../../../../../../../../packages/core/schematics/ng-generate/control-flow-migration/index.ts", "../../../../../../../../packages/core/schematics/utils/change_tracker.ts", "../../../../../../../../packages/core/schematics/utils/import_manager.ts", "../../../../../../../../packages/core/schematics/utils/typescript/compiler_host.ts", "../../../../../../../../packages/core/schematics/utils/typescript/parse_tsconfig.ts", "../../../../../../../../packages/compiler/src/selector.ts", "../../../../../../../../packages/compiler/src/core.ts", "../../../../../../../../packages/compiler/src/i18n/digest.ts", "../../../../../../../../packages/compiler/src/output/output_ast.ts", "../../../../../../../../packages/compiler/src/constant_pool.ts", "../../../../../../../../packages/compiler/src/render3/r3_identifiers.ts", "../../../../../../../../packages/compiler/src/util.ts", "../../../../../../../../packages/compiler/src/output/source_map.ts", "../../../../../../../../packages/compiler/src/output/abstract_emitter.ts", "../../../../../../../../packages/compiler/src/render3/util.ts", "../../../../../../../../packages/compiler/src/render3/r3_factory.ts", "../../../../../../../../packages/compiler/src/ml_parser/tags.ts", "../../../../../../../../packages/compiler/src/render3/r3_ast.ts", "../../../../../../../../packages/compiler/src/i18n/i18n_ast.ts", "../../../../../../../../packages/compiler/src/i18n/serializers/xml_helper.ts", "../../../../../../../../packages/compiler/src/i18n/serializers/xmb.ts", "../../../../../../../../packages/compiler/src/render3/view/i18n/util.ts", "../../../../../../../../packages/compiler/src/render3/view/util.ts", "../../../../../../../../packages/compiler/src/injectable_compiler_2.ts", "../../../../../../../../packages/compiler/src/assertions.ts", "../../../../../../../../packages/compiler/src/ml_parser/defaults.ts", "../../../../../../../../packages/compiler/src/chars.ts", "../../../../../../../../packages/compiler/src/parse_util.ts", "../../../../../../../../packages/compiler/src/output/abstract_js_emitter.ts", "../../../../../../../../packages/compiler/src/output/output_jit_trusted_types.ts", "../../../../../../../../packages/compiler/src/output/output_jit.ts", "../../../../../../../../packages/compiler/src/render3/r3_injector_compiler.ts", "../../../../../../../../packages/compiler/src/render3/r3_jit.ts", "../../../../../../../../packages/compiler/src/render3/r3_module_compiler.ts", "../../../../../../../../packages/compiler/src/render3/r3_pipe_compiler.ts", "../../../../../../../../packages/compiler/src/render3/view/api.ts", "../../../../../../../../packages/compiler/src/expression_parser/ast.ts", "../../../../../../../../packages/compiler/src/compiler_util/expression_converter.ts", "../../../../../../../../packages/compiler/src/schema/dom_security_schema.ts", "../../../../../../../../packages/compiler/src/shadow_css.ts", "../../../../../../../../packages/compiler/src/template/pipeline/ir/src/enums.ts", "../../../../../../../../packages/compiler/src/template/pipeline/ir/src/traits.ts", "../../../../../../../../packages/compiler/src/template/pipeline/ir/src/ops/shared.ts", "../../../../../../../../packages/compiler/src/template/pipeline/ir/src/ops/update.ts", "../../../../../../../../packages/compiler/src/template/pipeline/ir/src/expression.ts", "../../../../../../../../packages/compiler/src/template/pipeline/ir/src/operations.ts", "../../../../../../../../packages/compiler/src/template/pipeline/ir/src/handle.ts", "../../../../../../../../packages/compiler/src/template/pipeline/ir/src/ops/create.ts", "../../../../../../../../packages/compiler/src/template/pipeline/ir/src/ops/host.ts", "../../../../../../../../packages/compiler/src/template/pipeline/ir/src/variable.ts", "../../../../../../../../packages/compiler/src/template/pipeline/src/compilation.ts", "../../../../../../../../packages/compiler/src/template/pipeline/src/phases/any_cast.ts", "../../../../../../../../packages/compiler/src/template/pipeline/src/phases/apply_i18n_expressions.ts", "../../../../../../../../packages/compiler/src/template/pipeline/src/phases/assign_i18n_slot_dependencies.ts", "../../../../../../../../packages/compiler/src/template/pipeline/src/util/elements.ts", "../../../../../../../../packages/compiler/src/template/pipeline/src/phases/attribute_extraction.ts", "../../../../../../../../packages/compiler/src/template/pipeline/src/phases/binding_specialization.ts", "../../../../../../../../packages/compiler/src/template/pipeline/src/phases/chaining.ts", "../../../../../../../../packages/compiler/src/template/pipeline/src/phases/collapse_singleton_interpolations.ts", "../../../../../../../../packages/compiler/src/template/pipeline/src/phases/conditionals.ts", "../../../../../../../../packages/compiler/src/template/pipeline/src/conversion.ts", "../../../../../../../../packages/compiler/src/template/pipeline/src/phases/const_collection.ts", "../../../../../../../../packages/compiler/src/template/pipeline/src/phases/convert_i18n_bindings.ts", "../../../../../../../../packages/compiler/src/template/pipeline/src/phases/create_defer_deps_fns.ts", "../../../../../../../../packages/compiler/src/template/pipeline/src/phases/create_i18n_contexts.ts", "../../../../../../../../packages/compiler/src/template/pipeline/src/phases/deduplicate_text_bindings.ts", "../../../../../../../../packages/compiler/src/template/pipeline/src/phases/defer_configs.ts", "../../../../../../../../packages/compiler/src/template/pipeline/src/phases/defer_resolve_targets.ts", "../../../../../../../../packages/compiler/src/template/pipeline/src/phases/empty_elements.ts", "../../../../../../../../packages/compiler/src/template/pipeline/src/phases/expand_safe_reads.ts", "../../../../../../../../packages/compiler/src/template/pipeline/src/phases/extract_i18n_messages.ts", "../../../../../../../../packages/compiler/src/template/pipeline/src/phases/generate_advance.ts", "../../../../../../../../packages/compiler/src/template/pipeline/src/phases/generate_projection_def.ts", "../../../../../../../../packages/compiler/src/template/pipeline/src/phases/generate_variables.ts", "../../../../../../../../packages/compiler/src/template/pipeline/src/phases/has_const_expression_collection.ts", "../../../../../../../../packages/compiler/src/template/pipeline/src/phases/host_style_property_parsing.ts", "../../../../../../../../packages/compiler/src/output/map_util.ts", "../../../../../../../../packages/compiler/src/render3/view/i18n/icu_serializer.ts", "../../../../../../../../packages/compiler/src/expression_parser/lexer.ts", "../../../../../../../../packages/compiler/src/expression_parser/parser.ts", "../../../../../../../../packages/compiler/src/ml_parser/ast.ts", "../../../../../../../../packages/compiler/src/schema/element_schema_registry.ts", "../../../../../../../../packages/compiler/src/schema/dom_element_schema_registry.ts", "../../../../../../../../packages/compiler/src/ml_parser/html_tags.ts", "../../../../../../../../packages/compiler/src/i18n/serializers/placeholder.ts", "../../../../../../../../packages/compiler/src/i18n/i18n_parser.ts", "../../../../../../../../packages/compiler/src/i18n/parse_util.ts", "../../../../../../../../packages/compiler/src/ml_parser/entities.ts", "../../../../../../../../packages/compiler/src/ml_parser/lexer.ts", "../../../../../../../../packages/compiler/src/ml_parser/parser.ts", "../../../../../../../../packages/compiler/src/schema/trusted_types_sinks.ts", "../../../../../../../../packages/compiler/src/render3/view/i18n/meta.ts", "../../../../../../../../packages/compiler/src/render3/view/i18n/get_msg_utils.ts", "../../../../../../../../packages/compiler/src/render3/view/i18n/localize_utils.ts", "../../../../../../../../packages/compiler/src/template/pipeline/src/phases/i18n_const_collection.ts", "../../../../../../../../packages/compiler/src/template/pipeline/src/phases/i18n_text_extraction.ts", "../../../../../../../../packages/compiler/src/template/pipeline/src/phases/local_refs.ts", "../../../../../../../../packages/compiler/src/template/pipeline/src/phases/namespace.ts", "../../../../../../../../packages/compiler/src/render3/view/style_parser.ts", "../../../../../../../../packages/compiler/src/template/pipeline/src/phases/naming.ts", "../../../../../../../../packages/compiler/src/template/pipeline/src/phases/next_context_merging.ts", "../../../../../../../../packages/compiler/src/template/pipeline/src/phases/ng_container.ts", "../../../../../../../../packages/compiler/src/template/pipeline/src/phases/nonbindable.ts", "../../../../../../../../packages/compiler/src/template/pipeline/src/phases/nullish_coalescing.ts", "../../../../../../../../packages/compiler/src/template/pipeline/src/phases/ordering.ts", "../../../../../../../../packages/compiler/src/template/pipeline/src/phases/parse_extracted_styles.ts", "../../../../../../../../packages/compiler/src/template/pipeline/src/phases/phase_remove_content_selectors.ts", "../../../../../../../../packages/compiler/src/template/pipeline/src/phases/pipe_creation.ts", "../../../../../../../../packages/compiler/src/template/pipeline/src/phases/pipe_variadic.ts", "../../../../../../../../packages/compiler/src/template/pipeline/src/phases/propagate_i18n_blocks.ts", "../../../../../../../../packages/compiler/src/template/pipeline/src/phases/pure_function_extraction.ts", "../../../../../../../../packages/compiler/src/template/pipeline/src/phases/pure_literal_structures.ts", "../../../../../../../../packages/compiler/src/template/pipeline/src/instruction.ts", "../../../../../../../../packages/compiler/src/template/pipeline/src/phases/reify.ts", "../../../../../../../../packages/compiler/src/template/pipeline/src/phases/remove_empty_bindings.ts", "../../../../../../../../packages/compiler/src/template/pipeline/src/phases/remove_i18n_contexts.ts", "../../../../../../../../packages/compiler/src/template/pipeline/src/phases/remove_unused_i18n_attrs.ts", "../../../../../../../../packages/compiler/src/template/pipeline/src/phases/resolve_contexts.ts", "../../../../../../../../packages/compiler/src/template/pipeline/src/phases/resolve_dollar_event.ts", "../../../../../../../../packages/compiler/src/template/pipeline/src/phases/resolve_i18n_element_placeholders.ts", "../../../../../../../../packages/compiler/src/template/pipeline/src/phases/resolve_i18n_expression_placeholders.ts", "../../../../../../../../packages/compiler/src/template/pipeline/src/phases/resolve_names.ts", "../../../../../../../../packages/compiler/src/template/pipeline/src/phases/resolve_sanitizers.ts", "../../../../../../../../packages/compiler/src/template/pipeline/src/phases/transform_two_way_binding_set.ts", "../../../../../../../../packages/compiler/src/template/pipeline/src/phases/save_restore_view.ts", "../../../../../../../../packages/compiler/src/template/pipeline/src/phases/slot_allocation.ts", "../../../../../../../../packages/compiler/src/template/pipeline/src/phases/style_binding_specialization.ts", "../../../../../../../../packages/compiler/src/template/pipeline/src/phases/temporary_variables.ts", "../../../../../../../../packages/compiler/src/template/pipeline/src/phases/track_fn_generation.ts", "../../../../../../../../packages/compiler/src/template/pipeline/src/phases/track_fn_optimization.ts", "../../../../../../../../packages/compiler/src/template/pipeline/src/phases/track_variables.ts", "../../../../../../../../packages/compiler/src/template/pipeline/src/phases/var_counting.ts", "../../../../../../../../packages/compiler/src/template/pipeline/src/phases/variable_optimization.ts", "../../../../../../../../packages/compiler/src/template/pipeline/src/phases/wrap_icus.ts", "../../../../../../../../packages/compiler/src/template/pipeline/src/emit.ts", "../../../../../../../../packages/compiler/src/template/pipeline/src/ingest.ts", "../../../../../../../../packages/compiler/src/template/pipeline/switch/index.ts", "../../../../../../../../packages/compiler/src/ml_parser/html_parser.ts", "../../../../../../../../packages/compiler/src/ml_parser/html_whitespaces.ts", "../../../../../../../../packages/compiler/src/template_parser/binding_parser.ts", "../../../../../../../../packages/compiler/src/style_url_resolver.ts", "../../../../../../../../packages/compiler/src/template_parser/template_preparser.ts", "../../../../../../../../packages/compiler/src/render3/r3_control_flow.ts", "../../../../../../../../packages/compiler/src/render3/r3_deferred_triggers.ts", "../../../../../../../../packages/compiler/src/render3/r3_deferred_blocks.ts", "../../../../../../../../packages/compiler/src/render3/r3_template_transform.ts", "../../../../../../../../packages/compiler/src/render3/view/i18n/context.ts", "../../../../../../../../packages/compiler/src/render3/view/styling_builder.ts", "../../../../../../../../packages/compiler/src/render3/view/template.ts", "../../../../../../../../packages/compiler/src/render3/view/query_generation.ts", "../../../../../../../../packages/compiler/src/render3/view/compiler.ts", "../../../../../../../../packages/compiler/src/render3/view/t2_binder.ts", "../../../../../../../../packages/compiler/src/resource_loader.ts", "../../../../../../../../packages/compiler/src/jit_compiler_facade.ts", "../../../../../../../../packages/compiler/src/version.ts", "../../../../../../../../packages/compiler/src/i18n/extractor_merger.ts", "../../../../../../../../packages/compiler/src/ml_parser/xml_tags.ts", "../../../../../../../../packages/compiler/src/render3/partial/api.ts", "../../../../../../../../packages/compiler/src/compiler.ts", "../../../../../../../../packages/core/schematics/ng-generate/control-flow-migration/identifier-lookup.ts", "../../../../../../../../packages/core/schematics/ng-generate/control-flow-migration/types.ts", "../../../../../../../../packages/core/schematics/ng-generate/control-flow-migration/util.ts", "../../../../../../../../packages/core/schematics/ng-generate/control-flow-migration/cases.ts", "../../../../../../../../packages/core/schematics/ng-generate/control-flow-migration/fors.ts", "../../../../../../../../packages/core/schematics/ng-generate/control-flow-migration/ifs.ts", "../../../../../../../../packages/core/schematics/ng-generate/control-flow-migration/switches.ts", "../../../../../../../../packages/core/schematics/ng-generate/control-flow-migration/migration.ts"],
  "sourcesContent": ["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Rule, SchematicContext, SchematicsException, Tree} from '@angular-devkit/schematics';\nimport {join, relative} from 'path';\n\nimport {normalizePath} from '../../utils/change_tracker';\nimport {canMigrateFile, createMigrationProgram} from '../../utils/typescript/compiler_host';\n\nimport {migrateTemplate} from './migration';\nimport {AnalyzedFile, MigrateError} from './types';\nimport {analyze} from './util';\n\ninterface Options {\n  path: string;\n  format: boolean;\n}\n\nexport default function(options: Options): Rule {\n  return async (tree: Tree, context: SchematicContext) => {\n    const basePath = process.cwd();\n    const pathToMigrate = normalizePath(join(basePath, options.path));\n    let allPaths = [];\n    if (pathToMigrate.trim() !== '') {\n      allPaths.push(pathToMigrate);\n    }\n\n    if (!allPaths.length) {\n      throw new SchematicsException(\n          'Could not find any tsconfig file. Cannot run the control flow migration.');\n    }\n\n    context.logger.warn('IMPORTANT! This migration is in developer preview. Use with caution.');\n    let errors: string[] = [];\n\n    for (const tsconfigPath of allPaths) {\n      const migrateErrors =\n          runControlFlowMigration(tree, tsconfigPath, basePath, pathToMigrate, options);\n      errors = [...errors, ...migrateErrors];\n    }\n\n    if (errors.length > 0) {\n      context.logger.warn(`WARNING: ${errors.length} errors occurred during your migration:\\n`);\n      errors.forEach((err: string) => {\n        context.logger.warn(err);\n      });\n    }\n  };\n}\n\nfunction runControlFlowMigration(\n    tree: Tree, tsconfigPath: string, basePath: string, pathToMigrate: string,\n    schematicOptions: Options): string[] {\n  if (schematicOptions.path.startsWith('..')) {\n    throw new SchematicsException(\n        'Cannot run control flow migration outside of the current project.');\n  }\n\n  const program = createMigrationProgram(tree, tsconfigPath, basePath);\n  const sourceFiles = program.getSourceFiles().filter(\n      sourceFile => sourceFile.fileName.startsWith(pathToMigrate) &&\n          canMigrateFile(basePath, sourceFile, program));\n\n  if (sourceFiles.length === 0) {\n    throw new SchematicsException(`Could not find any files to migrate under the path ${\n        pathToMigrate}. Cannot run the control flow migration.`);\n  }\n\n  const analysis = new Map<string, AnalyzedFile>();\n  const migrateErrors = new Map<string, MigrateError[]>();\n\n  for (const sourceFile of sourceFiles) {\n    analyze(sourceFile, analysis);\n  }\n\n  // sort files with .html files first\n  // this ensures class files know if it's safe to remove CommonModule\n  const paths = sortFilePaths([...analysis.keys()]);\n\n  for (const path of paths) {\n    const file = analysis.get(path)!;\n    const ranges = file.getSortedRanges();\n    const relativePath = relative(basePath, path);\n    const content = tree.readText(relativePath);\n    const update = tree.beginUpdate(relativePath);\n\n    for (const {start, end, node, type} of ranges) {\n      const template = content.slice(start, end);\n      const length = (end ?? content.length) - start;\n\n      const {migrated, errors} =\n          migrateTemplate(template, type, node, file, schematicOptions.format, analysis);\n\n      if (migrated !== null) {\n        update.remove(start, length);\n        update.insertLeft(start, migrated);\n      }\n\n      if (errors.length > 0) {\n        migrateErrors.set(path, errors);\n      }\n    }\n\n    tree.commitUpdate(update);\n  }\n\n  const errorList: string[] = [];\n\n  for (let [template, errors] of migrateErrors) {\n    errorList.push(generateErrorMessage(template, errors));\n  }\n\n  return errorList;\n}\n\nfunction sortFilePaths(names: string[]): string[] {\n  names.sort((a, _) => a.endsWith('.html') ? -1 : 0);\n  return names;\n}\n\nfunction generateErrorMessage(path: string, errors: MigrateError[]): string {\n  let errorMessage = `Template \"${path}\" encountered ${errors.length} errors during migration:\\n`;\n  errorMessage += errors.map(e => ` - ${e.type}: ${e.error}\\n`);\n  return errorMessage;\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport ts from 'typescript';\n\nimport {ImportManager} from './import_manager';\n\n/** Function that can be used to remap a generated import. */\nexport type ImportRemapper = (moduleName: string, inFile: string) => string;\n\n/** Mapping between a source file and the changes that have to be applied to it. */\nexport type ChangesByFile = ReadonlyMap<ts.SourceFile, PendingChange[]>;\n\n/** Change that needs to be applied to a file. */\nexport interface PendingChange {\n  /** Index at which to start changing the file. */\n  start: number;\n  /**\n   * Amount of text that should be removed after the `start`.\n   * No text will be removed if omitted.\n   */\n  removeLength?: number;\n  /** New text that should be inserted. */\n  text: string;\n}\n\n/** Tracks changes that have to be made for specific files. */\nexport class ChangeTracker {\n  private readonly _changes = new Map<ts.SourceFile, PendingChange[]>();\n  private readonly _importManager: ImportManager;\n\n  constructor(private _printer: ts.Printer, private _importRemapper?: ImportRemapper) {\n    this._importManager = new ImportManager(\n        currentFile => ({\n          addNewImport: (start, text) => this.insertText(currentFile, start, text),\n          updateExistingImport: (namedBindings, text) => this.replaceText(\n              currentFile, namedBindings.getStart(), namedBindings.getWidth(), text),\n        }),\n        this._printer);\n  }\n\n  /**\n   * Tracks the insertion of some text.\n   * @param sourceFile File in which the text is being inserted.\n   * @param start Index at which the text is insert.\n   * @param text Text to be inserted.\n   */\n  insertText(sourceFile: ts.SourceFile, index: number, text: string): void {\n    this._trackChange(sourceFile, {start: index, text});\n  }\n\n  /**\n   * Replaces text within a file.\n   * @param sourceFile File in which to replace the text.\n   * @param start Index from which to replace the text.\n   * @param removeLength Length of the text being replaced.\n   * @param text Text to be inserted instead of the old one.\n   */\n  replaceText(sourceFile: ts.SourceFile, start: number, removeLength: number, text: string): void {\n    this._trackChange(sourceFile, {start, removeLength, text});\n  }\n\n  /**\n   * Replaces the text of an AST node with a new one.\n   * @param oldNode Node to be replaced.\n   * @param newNode New node to be inserted.\n   * @param emitHint Hint when formatting the text of the new node.\n   * @param sourceFileWhenPrinting File to use when printing out the new node. This is important\n   * when copying nodes from one file to another, because TypeScript might not output literal nodes\n   * without it.\n   */\n  replaceNode(\n      oldNode: ts.Node, newNode: ts.Node, emitHint = ts.EmitHint.Unspecified,\n      sourceFileWhenPrinting?: ts.SourceFile): void {\n    const sourceFile = oldNode.getSourceFile();\n    this.replaceText(\n        sourceFile, oldNode.getStart(), oldNode.getWidth(),\n        this._printer.printNode(emitHint, newNode, sourceFileWhenPrinting || sourceFile));\n  }\n\n  /**\n   * Removes the text of an AST node from a file.\n   * @param node Node whose text should be removed.\n   */\n  removeNode(node: ts.Node): void {\n    this._trackChange(\n        node.getSourceFile(), {start: node.getStart(), removeLength: node.getWidth(), text: ''});\n  }\n\n  /**\n   * Adds an import to a file.\n   * @param sourceFile File to which to add the import.\n   * @param symbolName Symbol being imported.\n   * @param moduleName Module from which the symbol is imported.\n   */\n  addImport(\n      sourceFile: ts.SourceFile, symbolName: string, moduleName: string, alias: string|null = null,\n      keepSymbolName = false): ts.Expression {\n    if (this._importRemapper) {\n      moduleName = this._importRemapper(moduleName, sourceFile.fileName);\n    }\n\n    // It's common for paths to be manipulated with Node's `path` utilties which\n    // can yield a path with back slashes. Normalize them since outputting such\n    // paths will also cause TS to escape the forward slashes.\n    moduleName = normalizePath(moduleName);\n\n    return this._importManager.addImportToSourceFile(\n        sourceFile, symbolName, moduleName, alias, false, keepSymbolName);\n  }\n\n  /**\n   * Gets the changes that should be applied to all the files in the migration.\n   * The changes are sorted in the order in which they should be applied.\n   */\n  recordChanges(): ChangesByFile {\n    this._importManager.recordChanges();\n    return this._changes;\n  }\n\n  /**\n   * Clear the tracked changes\n   */\n  clearChanges(): void {\n    this._changes.clear();\n  }\n\n  /**\n   * Adds a change to a `ChangesByFile` map.\n   * @param file File that the change is associated with.\n   * @param change Change to be added.\n   */\n  private _trackChange(file: ts.SourceFile, change: PendingChange): void {\n    const changes = this._changes.get(file);\n\n    if (changes) {\n      // Insert the changes in reverse so that they're applied in reverse order.\n      // This ensures that the offsets of subsequent changes aren't affected by\n      // previous changes changing the file's text.\n      const insertIndex = changes.findIndex(current => current.start <= change.start);\n\n      if (insertIndex === -1) {\n        changes.push(change);\n      } else {\n        changes.splice(insertIndex, 0, change);\n      }\n    } else {\n      this._changes.set(file, [change]);\n    }\n  }\n}\n\n/** Normalizes a path to use posix separators. */\nexport function normalizePath(path: string): string {\n  return path.replace(/\\\\/g, '/');\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {dirname, resolve} from 'path';\nimport ts from 'typescript';\n\n/** Update recorder for managing imports. */\nexport interface ImportManagerUpdateRecorder {\n  addNewImport(start: number, importText: string): void;\n  updateExistingImport(namedBindings: ts.NamedImports, newNamedBindings: string): void;\n}\n\n/** Possible types of quotes for imports. */\nconst enum QuoteStyle {\n  Single,\n  Double,\n}\n\n/**\n * Import manager that can be used to add TypeScript imports to given source\n * files. The manager ensures that multiple transformations are applied properly\n * without shifted offsets and that similar existing import declarations are re-used.\n */\nexport class ImportManager {\n  /** Map of import declarations that need to be updated to include the given symbols. */\n  private updatedImports =\n      new Map<ts.ImportDeclaration, {propertyName?: ts.Identifier, importName: ts.Identifier}[]>();\n  /** Map of source-files and their previously used identifier names. */\n  private usedIdentifierNames = new Map<ts.SourceFile, string[]>();\n  /** Map of source files and the new imports that have to be added to them. */\n  private newImports: Map<ts.SourceFile, {\n    importStartIndex: number,\n    defaultImports: Map<string, ts.Identifier>,\n    namedImports: Map<string, ts.ImportSpecifier[]>,\n  }> = new Map();\n  /** Map between a file and the implied quote style for imports. */\n  private quoteStyles: Record<string, QuoteStyle> = {};\n\n  /**\n   * Array of previously resolved symbol imports. Cache can be re-used to return\n   * the same identifier without checking the source-file again.\n   */\n  private importCache: {\n    sourceFile: ts.SourceFile,\n    symbolName: string|null,\n    alias: string|null,\n    moduleName: string,\n    identifier: ts.Identifier\n  }[] = [];\n\n  constructor(\n      private getUpdateRecorder: (sf: ts.SourceFile) => ImportManagerUpdateRecorder,\n      private printer: ts.Printer) {}\n\n  /**\n   * Adds an import to the given source-file and returns the TypeScript\n   * identifier that can be used to access the newly imported symbol.\n   */\n  addImportToSourceFile(\n      sourceFile: ts.SourceFile, symbolName: string|null, moduleName: string,\n      alias: string|null = null, typeImport = false, keepSymbolName = false): ts.Expression {\n    const sourceDir = dirname(sourceFile.fileName);\n    let importStartIndex = 0;\n    let existingImport: ts.ImportDeclaration|null = null;\n\n    // In case the given import has been already generated previously, we just return\n    // the previous generated identifier in order to avoid duplicate generated imports.\n    const cachedImport = this.importCache.find(\n        c => c.sourceFile === sourceFile && c.symbolName === symbolName &&\n            c.moduleName === moduleName && c.alias === alias);\n    if (cachedImport) {\n      return cachedImport.identifier;\n    }\n\n    // Walk through all source-file top-level statements and search for import declarations\n    // that already match the specified \"moduleName\" and can be updated to import the\n    // given symbol. If no matching import can be found, the last import in the source-file\n    // will be used as starting point for a new import that will be generated.\n    for (let i = sourceFile.statements.length - 1; i >= 0; i--) {\n      const statement = sourceFile.statements[i];\n\n      if (!ts.isImportDeclaration(statement) || !ts.isStringLiteral(statement.moduleSpecifier) ||\n          !statement.importClause) {\n        continue;\n      }\n\n      if (importStartIndex === 0) {\n        importStartIndex = this._getEndPositionOfNode(statement);\n      }\n\n      const moduleSpecifier = statement.moduleSpecifier.text;\n\n      if (moduleSpecifier.startsWith('.') &&\n              resolve(sourceDir, moduleSpecifier) !== resolve(sourceDir, moduleName) ||\n          moduleSpecifier !== moduleName) {\n        continue;\n      }\n\n      if (statement.importClause.namedBindings) {\n        const namedBindings = statement.importClause.namedBindings;\n\n        // In case a \"Type\" symbol is imported, we can't use namespace imports\n        // because these only export symbols available at runtime (no types)\n        if (ts.isNamespaceImport(namedBindings) && !typeImport) {\n          return ts.factory.createPropertyAccessExpression(\n              ts.factory.createIdentifier(namedBindings.name.text),\n              ts.factory.createIdentifier(alias || symbolName || 'default'));\n        } else if (ts.isNamedImports(namedBindings) && symbolName) {\n          const existingElement = namedBindings.elements.find(e => {\n            // TODO(crisbeto): if an alias conflicts with an existing import, it may cause invalid\n            // code to be generated. This is unlikely, but we may want to revisit it in the future.\n            if (alias) {\n              return e.propertyName && e.name.text === alias && e.propertyName.text === symbolName;\n            }\n            return e.propertyName ? e.propertyName.text === symbolName : e.name.text === symbolName;\n          });\n\n          if (existingElement) {\n            return ts.factory.createIdentifier(existingElement.name.text);\n          }\n\n          // In case the symbol could not be found in an existing import, we\n          // keep track of the import declaration as it can be updated to include\n          // the specified symbol name without having to create a new import.\n          existingImport = statement;\n        }\n      } else if (statement.importClause.name && !symbolName) {\n        return ts.factory.createIdentifier(statement.importClause.name.text);\n      }\n    }\n\n    if (existingImport) {\n      const {propertyName, name} =\n          this._getImportParts(sourceFile, symbolName!, alias, keepSymbolName);\n\n      // Since it can happen that multiple classes need to be imported within the\n      // specified source file and we want to add the identifiers to the existing\n      // import declaration, we need to keep track of the updated import declarations.\n      // We can't directly update the import declaration for each identifier as this\n      // would throw off the recorder offsets. We need to keep track of the new identifiers\n      // for the import and perform the import transformation as batches per source-file.\n      this.updatedImports.set(\n          existingImport,\n          (this.updatedImports.get(existingImport) || []).concat({propertyName, importName: name}));\n\n      // Keep track of all updated imports so that we don't generate duplicate\n      // similar imports as these can't be statically analyzed in the source-file yet.\n      this.importCache.push({sourceFile, moduleName, symbolName, alias, identifier: name});\n\n      return name;\n    }\n\n    let identifier: ts.Identifier|null = null;\n\n    if (!this.newImports.has(sourceFile)) {\n      this.newImports.set(sourceFile, {\n        importStartIndex,\n        defaultImports: new Map(),\n        namedImports: new Map(),\n      });\n    }\n\n    if (symbolName) {\n      const {propertyName, name} =\n          this._getImportParts(sourceFile, symbolName, alias, keepSymbolName);\n      const importMap = this.newImports.get(sourceFile)!.namedImports;\n      identifier = name;\n\n      if (!importMap.has(moduleName)) {\n        importMap.set(moduleName, []);\n      }\n\n      importMap.get(moduleName)!.push(ts.factory.createImportSpecifier(false, propertyName, name));\n    } else {\n      const importMap = this.newImports.get(sourceFile)!.defaultImports;\n      identifier = this._getUniqueIdentifier(sourceFile, 'defaultExport');\n      importMap.set(moduleName, identifier);\n    }\n\n    // Keep track of all generated imports so that we don't generate duplicate\n    // similar imports as these can't be statically analyzed in the source-file yet.\n    this.importCache.push({sourceFile, symbolName, moduleName, alias, identifier});\n\n    return identifier;\n  }\n\n  /**\n   * Stores the collected import changes within the appropriate update recorders. The\n   * updated imports can only be updated *once* per source-file because previous updates\n   * could otherwise shift the source-file offsets.\n   */\n  recordChanges() {\n    this.updatedImports.forEach((expressions, importDecl) => {\n      const sourceFile = importDecl.getSourceFile();\n      const recorder = this.getUpdateRecorder(sourceFile);\n      const namedBindings = importDecl.importClause!.namedBindings as ts.NamedImports;\n      const newNamedBindings = ts.factory.updateNamedImports(\n          namedBindings,\n          namedBindings.elements.concat(expressions.map(\n              ({propertyName, importName}) =>\n                  ts.factory.createImportSpecifier(false, propertyName, importName))));\n\n      const newNamedBindingsText =\n          this.printer.printNode(ts.EmitHint.Unspecified, newNamedBindings, sourceFile);\n      recorder.updateExistingImport(namedBindings, newNamedBindingsText);\n    });\n\n    this.newImports.forEach(({importStartIndex, defaultImports, namedImports}, sourceFile) => {\n      const recorder = this.getUpdateRecorder(sourceFile);\n      const useSingleQuotes = this._getQuoteStyle(sourceFile) === QuoteStyle.Single;\n\n      defaultImports.forEach((identifier, moduleName) => {\n        const newImport = ts.factory.createImportDeclaration(\n            undefined, ts.factory.createImportClause(false, identifier, undefined),\n            ts.factory.createStringLiteral(moduleName, useSingleQuotes));\n\n        recorder.addNewImport(\n            importStartIndex, this._getNewImportText(importStartIndex, newImport, sourceFile));\n      });\n\n      namedImports.forEach((specifiers, moduleName) => {\n        const newImport = ts.factory.createImportDeclaration(\n            undefined,\n            ts.factory.createImportClause(\n                false, undefined, ts.factory.createNamedImports(specifiers)),\n            ts.factory.createStringLiteral(moduleName, useSingleQuotes));\n\n        recorder.addNewImport(\n            importStartIndex, this._getNewImportText(importStartIndex, newImport, sourceFile));\n      });\n    });\n  }\n\n  /** Gets an unique identifier with a base name for the given source file. */\n  private _getUniqueIdentifier(sourceFile: ts.SourceFile, baseName: string): ts.Identifier {\n    if (this.isUniqueIdentifierName(sourceFile, baseName)) {\n      this._recordUsedIdentifier(sourceFile, baseName);\n      return ts.factory.createIdentifier(baseName);\n    }\n\n    let name = null;\n    let counter = 1;\n    do {\n      name = `${baseName}_${counter++}`;\n    } while (!this.isUniqueIdentifierName(sourceFile, name));\n\n    this._recordUsedIdentifier(sourceFile, name!);\n    return ts.factory.createIdentifier(name!);\n  }\n\n  /**\n   * Checks whether the specified identifier name is used within the given\n   * source file.\n   */\n  private isUniqueIdentifierName(sourceFile: ts.SourceFile, name: string) {\n    if (this.usedIdentifierNames.has(sourceFile) &&\n        this.usedIdentifierNames.get(sourceFile)!.indexOf(name) !== -1) {\n      return false;\n    }\n\n    // Walk through the source file and search for an identifier matching\n    // the given name. In that case, it's not guaranteed that this name\n    // is unique in the given declaration scope and we just return false.\n    const nodeQueue: ts.Node[] = [sourceFile];\n    while (nodeQueue.length) {\n      const node = nodeQueue.shift()!;\n      if (ts.isIdentifier(node) && node.text === name &&\n          // Identifiers that are aliased in an import aren't\n          // problematic since they're used under a different name.\n          (!ts.isImportSpecifier(node.parent) || node.parent.propertyName !== node)) {\n        return false;\n      }\n      nodeQueue.push(...node.getChildren());\n    }\n    return true;\n  }\n\n  private _recordUsedIdentifier(sourceFile: ts.SourceFile, identifierName: string) {\n    this.usedIdentifierNames.set(\n        sourceFile, (this.usedIdentifierNames.get(sourceFile) || []).concat(identifierName));\n  }\n\n  /**\n   * Determines the full end of a given node. By default the end position of a node is\n   * before all trailing comments. This could mean that generated imports shift comments.\n   */\n  private _getEndPositionOfNode(node: ts.Node) {\n    const nodeEndPos = node.getEnd();\n    const commentRanges = ts.getTrailingCommentRanges(node.getSourceFile().text, nodeEndPos);\n    if (!commentRanges || !commentRanges.length) {\n      return nodeEndPos;\n    }\n    return commentRanges[commentRanges.length - 1]!.end;\n  }\n\n  /** Gets the text that should be added to the file for a newly-created import declaration. */\n  private _getNewImportText(\n      importStartIndex: number, newImport: ts.ImportDeclaration,\n      sourceFile: ts.SourceFile): string {\n    const text = this.printer.printNode(ts.EmitHint.Unspecified, newImport, sourceFile);\n\n    // If the import is generated at the start of the source file, we want to add\n    // a new-line after the import. Otherwise if the import is generated after an\n    // existing import, we need to prepend a new-line so that the import is not on\n    // the same line as the existing import anchor\n    return importStartIndex === 0 ? `${text}\\n` : `\\n${text}`;\n  }\n\n  /**\n   * Gets the different parts necessary to construct an import specifier.\n   * @param sourceFile File in which the import is being inserted.\n   * @param symbolName Name of the symbol.\n   * @param alias Alias that the symbol may be available under.\n   * @returns Object containing the different parts. E.g. `{name: 'alias', propertyName: 'name'}`\n   * would correspond to `import {name as alias}` while `{name: 'name', propertyName: undefined}`\n   * corresponds to `import {name}`.\n   */\n  private _getImportParts(\n      sourceFile: ts.SourceFile, symbolName: string, alias: string|null, keepSymbolName: boolean) {\n    const symbolIdentifier = ts.factory.createIdentifier(symbolName);\n    const aliasIdentifier = alias ? ts.factory.createIdentifier(alias) : null;\n    const generatedUniqueIdentifier = this._getUniqueIdentifier(sourceFile, alias || symbolName);\n    const needsGeneratedUniqueName = generatedUniqueIdentifier.text !== (alias || symbolName);\n    let propertyName: ts.Identifier|undefined;\n    let name: ts.Identifier;\n\n    if (needsGeneratedUniqueName && !keepSymbolName) {\n      propertyName = symbolIdentifier;\n      name = generatedUniqueIdentifier;\n    } else if (aliasIdentifier) {\n      propertyName = symbolIdentifier;\n      name = aliasIdentifier;\n    } else {\n      name = symbolIdentifier;\n    }\n\n    return {propertyName, name};\n  }\n\n  /** Gets the quote style that is used for a file's imports. */\n  private _getQuoteStyle(sourceFile: ts.SourceFile): QuoteStyle {\n    if (!this.quoteStyles.hasOwnProperty(sourceFile.fileName)) {\n      let quoteStyle: QuoteStyle|undefined;\n\n      // Walk through the top-level imports and try to infer the quotes.\n      for (const statement of sourceFile.statements) {\n        if (ts.isImportDeclaration(statement) &&\n            ts.isStringLiteralLike(statement.moduleSpecifier)) {\n          // Use `getText` instead of the actual text since it includes the quotes.\n          quoteStyle = statement.moduleSpecifier.getText().trim().startsWith('\"') ?\n              QuoteStyle.Double :\n              QuoteStyle.Single;\n          break;\n        }\n      }\n\n      // Otherwise fall back to single quotes.\n      this.quoteStyles[sourceFile.fileName] = quoteStyle ?? QuoteStyle.Single;\n    }\n\n    return this.quoteStyles[sourceFile.fileName];\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Tree} from '@angular-devkit/schematics';\nimport {dirname, relative, resolve} from 'path';\nimport ts from 'typescript';\n\nimport {parseTsconfigFile} from './parse_tsconfig';\n\ntype FakeReadFileFn = (fileName: string) => string|undefined;\n\n/**\n * Creates a TypeScript program instance for a TypeScript project within\n * the virtual file system tree.\n * @param tree Virtual file system tree that contains the source files.\n * @param tsconfigPath Virtual file system path that resolves to the TypeScript project.\n * @param basePath Base path for the virtual file system tree.\n * @param fakeFileRead Optional file reader function. Can be used to overwrite files in\n *   the TypeScript program, or to add in-memory files (e.g. to add global types).\n * @param additionalFiles Additional file paths that should be added to the program.\n */\nexport function createMigrationProgram(\n    tree: Tree, tsconfigPath: string, basePath: string, fakeFileRead?: FakeReadFileFn,\n    additionalFiles?: string[]) {\n  const {rootNames, options, host} =\n      createProgramOptions(tree, tsconfigPath, basePath, fakeFileRead, additionalFiles);\n  return ts.createProgram(rootNames, options, host);\n}\n\n/**\n * Creates the options necessary to instantiate a TypeScript program.\n * @param tree Virtual file system tree that contains the source files.\n * @param tsconfigPath Virtual file system path that resolves to the TypeScript project.\n * @param basePath Base path for the virtual file system tree.\n * @param fakeFileRead Optional file reader function. Can be used to overwrite files in\n *   the TypeScript program, or to add in-memory files (e.g. to add global types).\n * @param additionalFiles Additional file paths that should be added to the program.\n * @param optionOverrides Overrides of the parsed compiler options.\n */\nexport function createProgramOptions(\n    tree: Tree, tsconfigPath: string, basePath: string, fakeFileRead?: FakeReadFileFn,\n    additionalFiles?: string[], optionOverrides?: ts.CompilerOptions) {\n  // Resolve the tsconfig path to an absolute path. This is needed as TypeScript otherwise\n  // is not able to resolve root directories in the given tsconfig. More details can be found\n  // in the following issue: https://github.com/microsoft/TypeScript/issues/37731.\n  tsconfigPath = resolve(basePath, tsconfigPath);\n  const parsed = parseTsconfigFile(tsconfigPath, dirname(tsconfigPath));\n  const options = optionOverrides ? {...parsed.options, ...optionOverrides} : parsed.options;\n  const host = createMigrationCompilerHost(tree, options, basePath, fakeFileRead);\n  return {rootNames: parsed.fileNames.concat(additionalFiles || []), options, host};\n}\n\nfunction createMigrationCompilerHost(\n    tree: Tree, options: ts.CompilerOptions, basePath: string,\n    fakeRead?: FakeReadFileFn): ts.CompilerHost {\n  const host = ts.createCompilerHost(options, true);\n  const defaultReadFile = host.readFile;\n\n  // We need to overwrite the host \"readFile\" method, as we want the TypeScript\n  // program to be based on the file contents in the virtual file tree. Otherwise\n  // if we run multiple migrations we might have intersecting changes and\n  // source files.\n  host.readFile = fileName => {\n    const treeRelativePath = relative(basePath, fileName);\n    let result: string|undefined = fakeRead?.(treeRelativePath);\n\n    if (typeof result !== 'string') {\n      // If the relative path resolved to somewhere outside of the tree, fall back to\n      // TypeScript's default file reading function since the `tree` will throw an error.\n      result = treeRelativePath.startsWith('..') ? defaultReadFile.call(host, fileName) :\n                                                   tree.read(treeRelativePath)?.toString();\n    }\n\n    // Strip BOM as otherwise TSC methods (Ex: getWidth) will return an offset,\n    // which breaks the CLI UpdateRecorder.\n    // See: https://github.com/angular/angular/pull/30719\n    return typeof result === 'string' ? result.replace(/^\\uFEFF/, '') : undefined;\n  };\n\n  return host;\n}\n\n/**\n * Checks whether a file can be migrate by our automated migrations.\n * @param basePath Absolute path to the project.\n * @param sourceFile File being checked.\n * @param program Program that includes the source file.\n */\nexport function canMigrateFile(\n    basePath: string, sourceFile: ts.SourceFile, program: ts.Program): boolean {\n  // We shouldn't migrate .d.ts files, files from an external library or type checking files.\n  if (sourceFile.fileName.endsWith('.ngtypecheck.ts') || sourceFile.isDeclarationFile ||\n      program.isSourceFileFromExternalLibrary(sourceFile)) {\n    return false;\n  }\n\n  // Our migrations are set up to create a `Program` from the project's tsconfig and to migrate all\n  // the files within the program. This can include files that are outside of the Angular CLI\n  // project. We can't migrate files outside of the project, because our file system interactions\n  // go through the CLI's `Tree` which assumes that all files are within the project. See:\n  // https://github.com/angular/angular-cli/blob/0b0961c9c233a825b6e4bb59ab7f0790f9b14676/packages/angular_devkit/schematics/src/tree/host-tree.ts#L131\n  return !relative(basePath, sourceFile.fileName).startsWith('..');\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport * as path from 'path';\nimport ts from 'typescript';\n\nexport function parseTsconfigFile(tsconfigPath: string, basePath: string): ts.ParsedCommandLine {\n  const {config} = ts.readConfigFile(tsconfigPath, ts.sys.readFile);\n  const parseConfigHost = {\n    useCaseSensitiveFileNames: ts.sys.useCaseSensitiveFileNames,\n    fileExists: ts.sys.fileExists,\n    readDirectory: ts.sys.readDirectory,\n    readFile: ts.sys.readFile,\n  };\n\n  // Throw if incorrect arguments are passed to this function. Passing relative base paths\n  // results in root directories not being resolved and in later type checking runtime errors.\n  // More details can be found here: https://github.com/microsoft/TypeScript/issues/37731.\n  if (!path.isAbsolute(basePath)) {\n    throw Error('Unexpected relative base path has been specified.');\n  }\n\n  return ts.parseJsonConfigFileContent(config, parseConfigHost, basePath, {});\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nconst _SELECTOR_REGEXP = new RegExp(\n    '(\\\\:not\\\\()|' +               // 1: \":not(\"\n        '(([\\\\.\\\\#]?)[-\\\\w]+)|' +  // 2: \"tag\"; 3: \".\"/\"#\";\n        // \"-\" should appear first in the regexp below as FF31 parses \"[.-\\w]\" as a range\n        // 4: attribute; 5: attribute_string; 6: attribute_value\n        '(?:\\\\[([-.\\\\w*\\\\\\\\$]+)(?:=([\\\"\\']?)([^\\\\]\\\"\\']*)\\\\5)?\\\\])|' +  // \"[name]\", \"[name=value]\",\n                                                                        // \"[name=\"value\"]\",\n                                                                        // \"[name='value']\"\n        '(\\\\))|' +                                                      // 7: \")\"\n        '(\\\\s*,\\\\s*)',                                                  // 8: \",\"\n    'g');\n\n/**\n * These offsets should match the match-groups in `_SELECTOR_REGEXP` offsets.\n */\nconst enum SelectorRegexp {\n  ALL = 0,  // The whole match\n  NOT = 1,\n  TAG = 2,\n  PREFIX = 3,\n  ATTRIBUTE = 4,\n  ATTRIBUTE_STRING = 5,\n  ATTRIBUTE_VALUE = 6,\n  NOT_END = 7,\n  SEPARATOR = 8,\n}\n/**\n * A css selector contains an element name,\n * css classes and attribute/value pairs with the purpose\n * of selecting subsets out of them.\n */\nexport class CssSelector {\n  element: string|null = null;\n  classNames: string[] = [];\n  /**\n   * The selectors are encoded in pairs where:\n   * - even locations are attribute names\n   * - odd locations are attribute values.\n   *\n   * Example:\n   * Selector: `[key1=value1][key2]` would parse to:\n   * ```\n   * ['key1', 'value1', 'key2', '']\n   * ```\n   */\n  attrs: string[] = [];\n  notSelectors: CssSelector[] = [];\n\n  static parse(selector: string): CssSelector[] {\n    const results: CssSelector[] = [];\n    const _addResult = (res: CssSelector[], cssSel: CssSelector) => {\n      if (cssSel.notSelectors.length > 0 && !cssSel.element && cssSel.classNames.length == 0 &&\n          cssSel.attrs.length == 0) {\n        cssSel.element = '*';\n      }\n      res.push(cssSel);\n    };\n    let cssSelector = new CssSelector();\n    let match: string[]|null;\n    let current = cssSelector;\n    let inNot = false;\n    _SELECTOR_REGEXP.lastIndex = 0;\n    while (match = _SELECTOR_REGEXP.exec(selector)) {\n      if (match[SelectorRegexp.NOT]) {\n        if (inNot) {\n          throw new Error('Nesting :not in a selector is not allowed');\n        }\n        inNot = true;\n        current = new CssSelector();\n        cssSelector.notSelectors.push(current);\n      }\n      const tag = match[SelectorRegexp.TAG];\n      if (tag) {\n        const prefix = match[SelectorRegexp.PREFIX];\n        if (prefix === '#') {\n          // #hash\n          current.addAttribute('id', tag.slice(1));\n        } else if (prefix === '.') {\n          // Class\n          current.addClassName(tag.slice(1));\n        } else {\n          // Element\n          current.setElement(tag);\n        }\n      }\n      const attribute = match[SelectorRegexp.ATTRIBUTE];\n\n      if (attribute) {\n        current.addAttribute(\n            current.unescapeAttribute(attribute), match[SelectorRegexp.ATTRIBUTE_VALUE]);\n      }\n      if (match[SelectorRegexp.NOT_END]) {\n        inNot = false;\n        current = cssSelector;\n      }\n      if (match[SelectorRegexp.SEPARATOR]) {\n        if (inNot) {\n          throw new Error('Multiple selectors in :not are not supported');\n        }\n        _addResult(results, cssSelector);\n        cssSelector = current = new CssSelector();\n      }\n    }\n    _addResult(results, cssSelector);\n    return results;\n  }\n\n  /**\n   * Unescape `\\$` sequences from the CSS attribute selector.\n   *\n   * This is needed because `$` can have a special meaning in CSS selectors,\n   * but we might want to match an attribute that contains `$`.\n   * [MDN web link for more\n   * info](https://developer.mozilla.org/en-US/docs/Web/CSS/Attribute_selectors).\n   * @param attr the attribute to unescape.\n   * @returns the unescaped string.\n   */\n  unescapeAttribute(attr: string): string {\n    let result = '';\n    let escaping = false;\n    for (let i = 0; i < attr.length; i++) {\n      const char = attr.charAt(i);\n      if (char === '\\\\') {\n        escaping = true;\n        continue;\n      }\n      if (char === '$' && !escaping) {\n        throw new Error(\n            `Error in attribute selector \"${attr}\". ` +\n            `Unescaped \"$\" is not supported. Please escape with \"\\\\$\".`);\n      }\n      escaping = false;\n      result += char;\n    }\n    return result;\n  }\n\n  /**\n   * Escape `$` sequences from the CSS attribute selector.\n   *\n   * This is needed because `$` can have a special meaning in CSS selectors,\n   * with this method we are escaping `$` with `\\$'.\n   * [MDN web link for more\n   * info](https://developer.mozilla.org/en-US/docs/Web/CSS/Attribute_selectors).\n   * @param attr the attribute to escape.\n   * @returns the escaped string. \n   */\n  escapeAttribute(attr: string): string {\n    return attr.replace(/\\\\/g, '\\\\\\\\').replace(/\\$/g, '\\\\$');\n  }\n\n  isElementSelector(): boolean {\n    return this.hasElementSelector() && this.classNames.length == 0 && this.attrs.length == 0 &&\n        this.notSelectors.length === 0;\n  }\n\n  hasElementSelector(): boolean {\n    return !!this.element;\n  }\n\n  setElement(element: string|null = null) {\n    this.element = element;\n  }\n\n  getAttrs(): string[] {\n    const result: string[] = [];\n    if (this.classNames.length > 0) {\n      result.push('class', this.classNames.join(' '));\n    }\n    return result.concat(this.attrs);\n  }\n\n  addAttribute(name: string, value: string = '') {\n    this.attrs.push(name, value && value.toLowerCase() || '');\n  }\n\n  addClassName(name: string) {\n    this.classNames.push(name.toLowerCase());\n  }\n\n  toString(): string {\n    let res: string = this.element || '';\n    if (this.classNames) {\n      this.classNames.forEach(klass => res += `.${klass}`);\n    }\n    if (this.attrs) {\n      for (let i = 0; i < this.attrs.length; i += 2) {\n        const name = this.escapeAttribute(this.attrs[i]);\n        const value = this.attrs[i + 1];\n        res += `[${name}${value ? '=' + value : ''}]`;\n      }\n    }\n    this.notSelectors.forEach(notSelector => res += `:not(${notSelector})`);\n    return res;\n  }\n}\n\n/**\n * Reads a list of CssSelectors and allows to calculate which ones\n * are contained in a given CssSelector.\n */\nexport class SelectorMatcher<T = any> {\n  static createNotMatcher(notSelectors: CssSelector[]): SelectorMatcher<null> {\n    const notMatcher = new SelectorMatcher<null>();\n    notMatcher.addSelectables(notSelectors, null);\n    return notMatcher;\n  }\n\n  private _elementMap = new Map<string, SelectorContext<T>[]>();\n  private _elementPartialMap = new Map<string, SelectorMatcher<T>>();\n  private _classMap = new Map<string, SelectorContext<T>[]>();\n  private _classPartialMap = new Map<string, SelectorMatcher<T>>();\n  private _attrValueMap = new Map<string, Map<string, SelectorContext<T>[]>>();\n  private _attrValuePartialMap = new Map<string, Map<string, SelectorMatcher<T>>>();\n  private _listContexts: SelectorListContext[] = [];\n\n  addSelectables(cssSelectors: CssSelector[], callbackCtxt?: T) {\n    let listContext: SelectorListContext = null!;\n    if (cssSelectors.length > 1) {\n      listContext = new SelectorListContext(cssSelectors);\n      this._listContexts.push(listContext);\n    }\n    for (let i = 0; i < cssSelectors.length; i++) {\n      this._addSelectable(cssSelectors[i], callbackCtxt as T, listContext);\n    }\n  }\n\n  /**\n   * Add an object that can be found later on by calling `match`.\n   * @param cssSelector A css selector\n   * @param callbackCtxt An opaque object that will be given to the callback of the `match` function\n   */\n  private _addSelectable(\n      cssSelector: CssSelector, callbackCtxt: T, listContext: SelectorListContext) {\n    let matcher: SelectorMatcher<T> = this;\n    const element = cssSelector.element;\n    const classNames = cssSelector.classNames;\n    const attrs = cssSelector.attrs;\n    const selectable = new SelectorContext(cssSelector, callbackCtxt, listContext);\n\n    if (element) {\n      const isTerminal = attrs.length === 0 && classNames.length === 0;\n      if (isTerminal) {\n        this._addTerminal(matcher._elementMap, element, selectable);\n      } else {\n        matcher = this._addPartial(matcher._elementPartialMap, element);\n      }\n    }\n\n    if (classNames) {\n      for (let i = 0; i < classNames.length; i++) {\n        const isTerminal = attrs.length === 0 && i === classNames.length - 1;\n        const className = classNames[i];\n        if (isTerminal) {\n          this._addTerminal(matcher._classMap, className, selectable);\n        } else {\n          matcher = this._addPartial(matcher._classPartialMap, className);\n        }\n      }\n    }\n\n    if (attrs) {\n      for (let i = 0; i < attrs.length; i += 2) {\n        const isTerminal = i === attrs.length - 2;\n        const name = attrs[i];\n        const value = attrs[i + 1];\n        if (isTerminal) {\n          const terminalMap = matcher._attrValueMap;\n          let terminalValuesMap = terminalMap.get(name);\n          if (!terminalValuesMap) {\n            terminalValuesMap = new Map<string, SelectorContext<T>[]>();\n            terminalMap.set(name, terminalValuesMap);\n          }\n          this._addTerminal(terminalValuesMap, value, selectable);\n        } else {\n          const partialMap = matcher._attrValuePartialMap;\n          let partialValuesMap = partialMap.get(name);\n          if (!partialValuesMap) {\n            partialValuesMap = new Map<string, SelectorMatcher<T>>();\n            partialMap.set(name, partialValuesMap);\n          }\n          matcher = this._addPartial(partialValuesMap, value);\n        }\n      }\n    }\n  }\n\n  private _addTerminal(\n      map: Map<string, SelectorContext<T>[]>, name: string, selectable: SelectorContext<T>) {\n    let terminalList = map.get(name);\n    if (!terminalList) {\n      terminalList = [];\n      map.set(name, terminalList);\n    }\n    terminalList.push(selectable);\n  }\n\n  private _addPartial(map: Map<string, SelectorMatcher<T>>, name: string): SelectorMatcher<T> {\n    let matcher = map.get(name);\n    if (!matcher) {\n      matcher = new SelectorMatcher<T>();\n      map.set(name, matcher);\n    }\n    return matcher;\n  }\n\n  /**\n   * Find the objects that have been added via `addSelectable`\n   * whose css selector is contained in the given css selector.\n   * @param cssSelector A css selector\n   * @param matchedCallback This callback will be called with the object handed into `addSelectable`\n   * @return boolean true if a match was found\n   */\n  match(cssSelector: CssSelector, matchedCallback: ((c: CssSelector, a: T) => void)|null): boolean {\n    let result = false;\n    const element = cssSelector.element!;\n    const classNames = cssSelector.classNames;\n    const attrs = cssSelector.attrs;\n\n    for (let i = 0; i < this._listContexts.length; i++) {\n      this._listContexts[i].alreadyMatched = false;\n    }\n\n    result = this._matchTerminal(this._elementMap, element, cssSelector, matchedCallback) || result;\n    result = this._matchPartial(this._elementPartialMap, element, cssSelector, matchedCallback) ||\n        result;\n\n    if (classNames) {\n      for (let i = 0; i < classNames.length; i++) {\n        const className = classNames[i];\n        result =\n            this._matchTerminal(this._classMap, className, cssSelector, matchedCallback) || result;\n        result =\n            this._matchPartial(this._classPartialMap, className, cssSelector, matchedCallback) ||\n            result;\n      }\n    }\n\n    if (attrs) {\n      for (let i = 0; i < attrs.length; i += 2) {\n        const name = attrs[i];\n        const value = attrs[i + 1];\n\n        const terminalValuesMap = this._attrValueMap.get(name)!;\n        if (value) {\n          result =\n              this._matchTerminal(terminalValuesMap, '', cssSelector, matchedCallback) || result;\n        }\n        result =\n            this._matchTerminal(terminalValuesMap, value, cssSelector, matchedCallback) || result;\n\n        const partialValuesMap = this._attrValuePartialMap.get(name)!;\n        if (value) {\n          result = this._matchPartial(partialValuesMap, '', cssSelector, matchedCallback) || result;\n        }\n        result =\n            this._matchPartial(partialValuesMap, value, cssSelector, matchedCallback) || result;\n      }\n    }\n    return result;\n  }\n\n  /** @internal */\n  _matchTerminal(\n      map: Map<string, SelectorContext<T>[]>, name: string, cssSelector: CssSelector,\n      matchedCallback: ((c: CssSelector, a: any) => void)|null): boolean {\n    if (!map || typeof name !== 'string') {\n      return false;\n    }\n\n    let selectables: SelectorContext<T>[] = map.get(name) || [];\n    const starSelectables: SelectorContext<T>[] = map.get('*')!;\n    if (starSelectables) {\n      selectables = selectables.concat(starSelectables);\n    }\n    if (selectables.length === 0) {\n      return false;\n    }\n    let selectable: SelectorContext<T>;\n    let result = false;\n    for (let i = 0; i < selectables.length; i++) {\n      selectable = selectables[i];\n      result = selectable.finalize(cssSelector, matchedCallback) || result;\n    }\n    return result;\n  }\n\n  /** @internal */\n  _matchPartial(\n      map: Map<string, SelectorMatcher<T>>, name: string, cssSelector: CssSelector,\n      matchedCallback: ((c: CssSelector, a: any) => void)|null): boolean {\n    if (!map || typeof name !== 'string') {\n      return false;\n    }\n\n    const nestedSelector = map.get(name);\n    if (!nestedSelector) {\n      return false;\n    }\n    // TODO(perf): get rid of recursion and measure again\n    // TODO(perf): don't pass the whole selector into the recursion,\n    // but only the not processed parts\n    return nestedSelector.match(cssSelector, matchedCallback);\n  }\n}\n\n\nexport class SelectorListContext {\n  alreadyMatched: boolean = false;\n\n  constructor(public selectors: CssSelector[]) {}\n}\n\n// Store context to pass back selector and context when a selector is matched\nexport class SelectorContext<T = any> {\n  notSelectors: CssSelector[];\n\n  constructor(\n      public selector: CssSelector, public cbContext: T, public listContext: SelectorListContext) {\n    this.notSelectors = selector.notSelectors;\n  }\n\n  finalize(cssSelector: CssSelector, callback: ((c: CssSelector, a: T) => void)|null): boolean {\n    let result = true;\n    if (this.notSelectors.length > 0 && (!this.listContext || !this.listContext.alreadyMatched)) {\n      const notMatcher = SelectorMatcher.createNotMatcher(this.notSelectors);\n      result = !notMatcher.match(cssSelector, null);\n    }\n    if (result && callback && (!this.listContext || !this.listContext.alreadyMatched)) {\n      if (this.listContext) {\n        this.listContext.alreadyMatched = true;\n      }\n      callback(this.selector, this.cbContext);\n    }\n    return result;\n  }\n}\n", "/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// Attention:\n// This file duplicates types and values from @angular/core\n// so that we are able to make @angular/compiler independent of @angular/core.\n// This is important to prevent a build cycle, as @angular/core needs to\n// be compiled with the compiler.\n\nimport {CssSelector} from './selector';\n\n// Stores the default value of `emitDistinctChangesOnly` when the `emitDistinctChangesOnly` is not\n// explicitly set.\nexport const emitDistinctChangesOnlyDefaultValue = true;\n\nexport enum ViewEncapsulation {\n  Emulated = 0,\n  // Historically the 1 value was for `Native` encapsulation which has been removed as of v11.\n  None = 2,\n  ShadowDom = 3\n}\n\nexport enum ChangeDetectionStrategy {\n  OnPush = 0,\n  Default = 1\n}\n\nexport interface Input {\n  alias?: string;\n  required?: boolean;\n  transform?: (value: any) => any;\n  // Note: This field is marked as `internal` in `@angular/core`, but in the compiler\n  // we rely on it for JIT processing at runtime.\n  isSignal: boolean;\n}\n\n/** Flags describing an input for a directive. */\nexport enum InputFlags {\n  None = 0,\n  SignalBased = 1 << 0,\n  HasDecoratorInputTransform = 1 << 1,\n}\n\nexport interface Output {\n  alias?: string;\n}\n\nexport interface HostBinding {\n  hostPropertyName?: string;\n}\n\nexport interface HostListener {\n  eventName?: string;\n  args?: string[];\n}\n\nexport interface SchemaMetadata {\n  name: string;\n}\n\nexport const CUSTOM_ELEMENTS_SCHEMA: SchemaMetadata = {\n  name: 'custom-elements'\n};\n\nexport const NO_ERRORS_SCHEMA: SchemaMetadata = {\n  name: 'no-errors-schema'\n};\n\nexport interface Type extends Function {\n  new(...args: any[]): any;\n}\nexport const Type = Function;\n\nexport enum SecurityContext {\n  NONE = 0,\n  HTML = 1,\n  STYLE = 2,\n  SCRIPT = 3,\n  URL = 4,\n  RESOURCE_URL = 5,\n}\n\n/**\n * Injection flags for DI.\n */\nexport const enum InjectFlags {\n  Default = 0,\n\n  /**\n   * Specifies that an injector should retrieve a dependency from any injector until reaching the\n   * host element of the current component. (Only used with Element Injector)\n   */\n  Host = 1 << 0,\n  /** Don't descend into ancestors of the node requesting injection. */\n  Self = 1 << 1,\n  /** Skip the node that is requesting injection. */\n  SkipSelf = 1 << 2,\n  /** Inject `defaultValue` instead if token not found. */\n  Optional = 1 << 3,\n  /**\n   * This token is being injected into a pipe.\n   * @internal\n   */\n  ForPipe = 1 << 4,\n}\n\nexport enum MissingTranslationStrategy {\n  Error = 0,\n  Warning = 1,\n  Ignore = 2,\n}\n\n/**\n * Flags used to generate R3-style CSS Selectors. They are pasted from\n * core/src/render3/projection.ts because they cannot be referenced directly.\n */\nexport const enum SelectorFlags {\n  /** Indicates this is the beginning of a new negative selector */\n  NOT = 0b0001,\n\n  /** Mode for matching attributes */\n  ATTRIBUTE = 0b0010,\n\n  /** Mode for matching tag names */\n  ELEMENT = 0b0100,\n\n  /** Mode for matching class names */\n  CLASS = 0b1000,\n}\n\n// These are a copy the CSS types from core/src/render3/interfaces/projection.ts\n// They are duplicated here as they cannot be directly referenced from core.\nexport type R3CssSelector = (string|SelectorFlags)[];\nexport type R3CssSelectorList = R3CssSelector[];\n\nfunction parserSelectorToSimpleSelector(selector: CssSelector): R3CssSelector {\n  const classes = selector.classNames && selector.classNames.length ?\n      [SelectorFlags.CLASS, ...selector.classNames] :\n      [];\n  const elementName = selector.element && selector.element !== '*' ? selector.element : '';\n  return [elementName, ...selector.attrs, ...classes];\n}\n\nfunction parserSelectorToNegativeSelector(selector: CssSelector): R3CssSelector {\n  const classes = selector.classNames && selector.classNames.length ?\n      [SelectorFlags.CLASS, ...selector.classNames] :\n      [];\n\n  if (selector.element) {\n    return [\n      SelectorFlags.NOT | SelectorFlags.ELEMENT, selector.element, ...selector.attrs, ...classes\n    ];\n  } else if (selector.attrs.length) {\n    return [SelectorFlags.NOT | SelectorFlags.ATTRIBUTE, ...selector.attrs, ...classes];\n  } else {\n    return selector.classNames && selector.classNames.length ?\n        [SelectorFlags.NOT | SelectorFlags.CLASS, ...selector.classNames] :\n        [];\n  }\n}\n\nfunction parserSelectorToR3Selector(selector: CssSelector): R3CssSelector {\n  const positive = parserSelectorToSimpleSelector(s